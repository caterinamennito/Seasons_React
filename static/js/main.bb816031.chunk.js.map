{"version":3,"sources":["serviceWorker.js","components/SeasonsDisplay.js","components/Spinner.js","index.js"],"names":["Boolean","window","location","hostname","match","seasonConfig","summer","text","iconName","winter","SeasonsDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorMessage","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","components_SeasonsDisplay","components_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECfAC,EAAe,CACnBC,OAAQ,CACNC,KAAM,wBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAO,eACPC,SAAU,cAgCCE,EAlBQ,SAAAC,GACrB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YATrC,GAAKH,EAAM,EACZD,EAAM,EAAI,SAAW,SAErBA,EAAI,EAAI,SAAW,UAKEK,EAOJZ,EAAaS,GAA/BP,EAPsBU,EAOtBV,KAAMC,EAPgBS,EAOhBT,SAEd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAClCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACVU,EAAAC,EAAAC,cAAA,UAAKb,GACPW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aCnCVe,EAAU,SAAAZ,GACd,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,IAAsCV,EAAMa,WAKlDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCLTG,cAGJ,SAAAA,EAAYf,GAAM,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAGhBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KAIDuB,MAAQ,CAAEtB,IAAK,KAAMuB,aAAc,IAPxBR,mFAaE,IAAAS,EAAAN,KAClB7B,OAAOoC,UAAUC,YAAYC,mBAE3B,SAACC,GAAD,OAAcJ,EAAKK,SAAS,CAAE7B,IAAK4B,EAASE,OAAOC,YACnD,SAACC,GAAD,OAASR,EAAKK,SAAS,CAACN,aAAeS,EAAIpB,oDAOvC,OAAIM,KAAKI,MAAMC,eAAiBL,KAAKI,MAAMtB,IAClCM,EAAAC,EAAAC,cAAA,qBAAaU,KAAKI,MAAMC,eAG5BL,KAAKI,MAAMC,cAAgBL,KAAKI,MAAMtB,IAClCM,EAAAC,EAAAC,cAACyB,EAAD,CAAgBjC,IAAKkB,KAAKI,MAAMtB,MAGlCM,EAAAC,EAAAC,cAAC0B,EAAD,CAAStB,QAAQ,oEAI5B,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZS,KAAKiB,wBAzCEC,IAAMC,WAgDxBC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SHwE3C,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb816031.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n  summer: {\n    text: 'Let\\' s hit the beach!',\n    iconName: 'sun'\n  },\n  winter: {\n    text : 'It\\'s chilly!',\n    iconName: 'snowflake'\n  }\n};\n\n\nconst getSeason = (lat, month) => {\n  if (month>2 && month<9){\n    return lat > 0 ? 'summer' : 'winter';\n  } else {\n    return lat<0 ? 'winter' : 'summer';\n  }\n}\n\n//every time we pass a prop into a functional component, it's going to show up inside of an object that is the first argument to that functional component (that we refer of as 'props')\nconst SeasonsDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  //we removed this as we created seasonConfig\n  //const text = season === 'winter' ? 'It\\'s chilly!' : 'Let\\' s hit the beach!' ;\n  //Other possibility of writing the condition directly, without using the const text\n  // in the return, <div> :  {season === 'winter' ? 'It\\'s chilly' : 'Let\\'s hit the beach!'}/*}\n  //const icon = season === 'winter' ? 'snowflake' : 'sun';\n  const { text, iconName} = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`} >\n    <i className={`icon-left massive ${iconName} icon`}/>\n      <h1>{text}</h1>\n    <i className={`icon-right massive ${iconName} icon`}/>\n    </div>\n    );\n};\n\nexport default SeasonsDisplay;\n","import React from 'react';\n\nconst Spinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\"> {props.message }</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport SeasonsDisplay from './components/SeasonsDisplay';\nimport Spinner from './components/Spinner';\n\n\nclass App extends React.Component{\n\n//constructor is not smt specific from React, it'a JS function. It's the very first function that is called every time that an instance of this class is created\n  constructor(props){\n    //obligatory. We are creating a subclass, and in Component there is already a constructor function. So we are basically overwriting it.\n    //Super is a reference to the parent's constructor function.\n    super(props);\n    //initialize state object, with some properties relevant to our component\n    //null because we're expecting a number (latitude) but we don't have it yet\n    //THIS IS THE ONLY TIME WE DO DIRECT ASSIGNMENT TO THE STATE\n    this.state = { lat: null, errorMessage: '' };\n  }\n\n// we can also initialize the state this way :\n  //state = { lat: null, errorMessage: '' };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      //we call setState to update state NOT THIS.STATE\n      (position) => this.setState({ lat: position.coords.latitude}),\n      (err) => this.setState({errorMessage : err.message})\n    );\n  }\n\nrenderContent(){\n  //could also be written with else if and else\n  //we moved this from render to an 'helper function' to be able to have a class that renders in any case\n          if (this.state.errorMessage &&! this.state.lat){\n            return <div>Error: {this.state.errorMessage}</div>;\n          }\n\n          if (!this.state.errorMessage && this.state.lat) {\n            return <SeasonsDisplay lat={this.state.lat} />\n          }\n\n          return <Spinner message=\"Please accept location request\"/>;\n}\n\n    render(){\n      return (\n        <div className=\"border red\">\n          {this.renderContent()}\n        </div>\n      );\n    }\n  }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}